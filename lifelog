#!/usr/bin/python
# coding=utf-8
import sys
import re
import subprocess
from datetime import datetime, timedelta
from terminal_colours import *

# From date.py in google
ACCEPTED_DAY_TIME_FORMAT = '%Y-%m-%dT%H:%M:%S'


def main():
    if len(sys.argv) < 2:
        print header("Subcommands:"), "add"
        sys.exit()
    subcommand = sys.argv[1]
    eval("command_" + subcommand)(sys.argv[2:])


def command_now(args):
    if len(args) != 1:
        print fail("Usage: add \"Thinking\""), "- adds a 0-minute event right now"
        return
    now = date_format(datetime.now())
    no_length = "%s,%s" % (now, now)
    event = hash_parse(args[0])
    print run(['google', 'calendar', 'add', '-d', no_length, event])


def command_for(args):
    if len(args) != 2:
        print fail("Usage: for 10 \"Drinking\""), "- adds a 10 minute event right now"
        return
    now = date_format(datetime.now())
    later = date_format(datetime.now() + timedelta(minutes=int(args[0])))
    length = "%s,%s" % (now, later)
    event = hash_parse(args[1])
    print run(['google', 'calendar', 'add', '-d', length, event])


def command_quick(args):
    if len(args) != 1:
        print fail("Usage: quick \"tomorrow 7pm Pub with Andy\""), "- adds with google's quick-add syntax"
    else:
        event = hash_parse(args[0])
        print event
        print run(['google', 'calendar', 'add', event])


def command_today(args):
    print cal_format(run(['google', 'calendar', 'today']))


def command_yesterday(args):
    minus_24 = datetime.now() - timedelta(hours=24)
    yesterday = datetime.strftime(minus_24, '%Y-%m-%d')
    print cal_format(run(['google', 'calendar', 'list', '-d', yesterday]))

# Utilities


def run(comm):
    proc = subprocess.Popen(comm,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    output = proc.communicate()
    # Concat stdout & stderr, because we don't care
    return output[0] + "\n" + output[1]


def date_format(datetime):
    return datetime.strftime(ACCEPTED_DAY_TIME_FORMAT)


def hash_parse(ev_str):
    # Because I can't type hash on terminal.
    return ev_str.replace('--', '#')


def cal_format(cal_str):
    # Remove header
    cal_str = re.sub(r'^\[.*\]$',
                     '',
                     cal_str,
                     flags=re.MULTILINE)

    # Highlight hashtags
    def tag_highlight(match):
        return header(match.group(0))

    cal_str = re.sub(r'\#\w+\b',
                    tag_highlight,
                    cal_str,
                    flags=re.MULTILINE)

    # Highlight event times
    def event_highlight(match):
        return okblue(match.group(2)) + "\t" + match.group(1)
    cal_str = re.sub(r'^(.+),([^,\n]+)$',
                    event_highlight,
                    cal_str,
                    flags=re.MULTILINE)

    return cal_str


# Run


if __name__ == '__main__':
    main()
